<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Constants\Constant;

/**
 * FolderUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FolderUserRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $id_folder
     * @return array
     */
    public function getInvitationByFolder($id_folder)
    {
        $qb = $this->createQueryBuilder("fo")
            ->select("user.id as user_id")
            ->addSelect("user.username as user_name")
            ->addSelect("user.firstname as user_firstname")
            ->addSelect("user.email as user_mail")
            ->addSelect("droit.id as droite_id")
            ->addSelect("droit.name as droite_name")
            ->innerJoin("fo.folder", "dossier")
            ->innerJoin("fo.user", "user")
            ->innerJoin("fo.right", "droit")
            ->where("dossier.id =:id_folder")
            ->setParameter("id_folder", $id_folder);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $id_folder
     * @return array
     */
    public function getByIdFolder($id_folder)
    {
        $qb = $this->createQueryBuilder("fo")
            ->select("usr.email")
            ->innerJoin("fo.folder", "folder")
            ->innerJoin("fo.user", "usr")
            ->where("folder.id =:id_folder")
            ->setParameter("id_folder", $id_folder);
        $result = $qb->getQuery()->getResult();
        $data = [];
        foreach ($result as $mails) {
            $data[] = $mails['email'];
        }
        return $data;
    }

    /**
     * @param $user
     * @param $folder
     * @return array
     */
    public function getDroitOfUser($user, $folder)
    {
        return $this->createQueryBuilder("fu")
            ->innerJoin("fu.user", "user")
            ->innerJoin("fu.folder", "f")
            ->innerJoin("fu.right", "r")
            ->where("user =:user_")
            ->andWhere("f =:folder_ AND r.id =:manager_")
            ->setParameter("user_", $user)
            ->setParameter("folder_", $folder)
            ->setParameter("manager_", Constant::RIGHT_MANAGER)
            ->getQuery()->getResult();
    }

    /**
     * get right of user
     *
     * @param  $user
     * @param  $folder
     * @return array
     */
    public function getRightUser($user, $folder)
    {
        return $this->createQueryBuilder("fu")
            ->select("r.id")
            ->innerJoin("fu.user", "user")
            ->innerJoin("fu.folder", "f")
            ->innerJoin("fu.right", "r")
            ->where("user =:user_")
            ->andWhere("f =:folder_")
            ->setParameter("user_", $user)
            ->setParameter("folder_", $folder)
            ->getQuery()->getResult();
    }
}
